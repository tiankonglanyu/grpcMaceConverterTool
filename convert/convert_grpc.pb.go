// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package convert

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConvertClient is the client API for Convert service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConvertClient interface {
	// 转化函数， 服务端流
	Mace(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Server, error)
}

type convertClient struct {
	cc grpc.ClientConnInterface
}

func NewConvertClient(cc grpc.ClientConnInterface) ConvertClient {
	return &convertClient{cc}
}

func (c *convertClient) Mace(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/Convert/Mace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConvertServer is the server API for Convert service.
// All implementations must embed UnimplementedConvertServer
// for forward compatibility
type ConvertServer interface {
	// 转化函数， 服务端流
	Mace(context.Context, *Client) (*Server, error)
	mustEmbedUnimplementedConvertServer()
}

// UnimplementedConvertServer must be embedded to have forward compatible implementations.
type UnimplementedConvertServer struct {
}

func (UnimplementedConvertServer) Mace(context.Context, *Client) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mace not implemented")
}
func (UnimplementedConvertServer) mustEmbedUnimplementedConvertServer() {}

// UnsafeConvertServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConvertServer will
// result in compilation errors.
type UnsafeConvertServer interface {
	mustEmbedUnimplementedConvertServer()
}

func RegisterConvertServer(s grpc.ServiceRegistrar, srv ConvertServer) {
	s.RegisterService(&Convert_ServiceDesc, srv)
}

func _Convert_Mace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvertServer).Mace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Convert/Mace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvertServer).Mace(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

// Convert_ServiceDesc is the grpc.ServiceDesc for Convert service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Convert_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Convert",
	HandlerType: (*ConvertServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mace",
			Handler:    _Convert_Mace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "convert.proto",
}
